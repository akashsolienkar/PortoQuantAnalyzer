package com.example.portoquant.simulation;

import java.util.Arrays;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

import com.example.portoquant.analyticalmodels.ExpectedReturnModel;
import com.example.portoquant.analyticalmodels.VolatilityModel;
import com.example.portoquant.datamodels.SimulationResult;


/**
 * Monte Carlo Simulation for Portfolio Risk Analysis using Java Fork/Join Framework.
 * This program simulates thousands of possible future portfolio outcomes using
 * Geometric Brownian Motion (GBM) and computes risk metrics such as:
 * - Value at Risk (VaR)
 * - Expected Shortfall
 * - Portfolio Volatility
 * - Probability of Bankruptcy
 */
public class MultiMonteCarloSimulation {

    public double[] simulate( int numPaths, SimulationRunner simFunction,Map<String,Object> Params)
    {
//        int numPaths = 100_000;              // Total number of simulation paths
//        int steps = 252;                     // Time steps (252 trading days in a year)
//        double S0 = 1000;                    // Initial portfolio value
//        double mu = 0.08;                    // Expected annual return
//        double sigma = 0.2;                  // Annual volatility
//        double T = 1.0;                      // Time horizon in years

        long start = System.currentTimeMillis();

        // ForkJoinPool leverages all CPU cores for parallel processing
        ForkJoinPool pool = new ForkJoinPool();
        // Create the root task to start simulation
        MonteCarloTask rootTask = new MonteCarloTask(0, numPaths,simFunction, Params);
        double[] finalOutcomes = pool.invoke(rootTask); // Kick off the Fork/Join simulation

        long end = System.currentTimeMillis();
        System.out.printf("\n Simulated %,d paths using Fork/Join in %.2f seconds%n", numPaths, (end - start) / 1000.0);
 
       return finalOutcomes;

    }

    /**
     * Recursive task for simulating a subset of paths using Geometric Brownian Motion.
     * Automatically splits into smaller tasks based on a predefined threshold.
     */
    public static class MonteCarloTask extends RecursiveTask<double[]> {
        private static final int THRESHOLD = 1000000;  // Threshold to decide task splitting
        private int start, end;
        SimulationRunner simFunction;
        Map<String,Object> params;
        
        public MonteCarloTask(int start, int end,SimulationRunner simFunction, Map<String,Object> params) {
            this.start = start;
            this.end = end;
            this.simFunction=simFunction;
            this.params=params;
        }

        @Override
        protected double[] compute() {
            if (end - start <= THRESHOLD) {
                // Base case: simulate the paths directly
                double[] outcomes = new double[end - start];

                for (int i = 0; i < outcomes.length; i++) {
                    	double value;
                        value = simFunction.generate(this.params) ;
                        outcomes[i] = value;
                }
                return outcomes;

            } else 
            {
                // Recursive case: split task into two subtasks
                int mid = (start + end) / 2;
                MonteCarloTask left = new MonteCarloTask(start, mid, simFunction, params);
                MonteCarloTask right = new MonteCarloTask(mid, end, simFunction, params);
                invokeAll(left, right); // Run subtasks in parallel

                // Merge results from subtasks
                double[] leftResult = left.join();
                double[] rightResult = right.join();
                double[] combined = new double[leftResult.length + rightResult.length];
                System.arraycopy(leftResult, 0, combined, 0, leftResult.length);
                System.arraycopy(rightResult, 0, combined, leftResult.length, rightResult.length);
                return combined;
            }
        }
    }


}
