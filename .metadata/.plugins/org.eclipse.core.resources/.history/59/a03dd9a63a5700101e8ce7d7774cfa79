package com.example.portoquant.garchmodel;

import java.util.ArrayList;
import java.util.List;

/**
 * Implements a basic GARCH(1,1) model to estimate time-varying volatility (σₜ).
 * <p>
 * This model captures volatility clustering by modeling variance as a function of past squared returns (ARCH effect)
 * and past variance (GARCH effect).
 * </p>
 * <p>
 * Usage:
 * <pre>
 *   GarchModel garch = GarchModel.getInstance();
 *   List<Double> sigmaSeries = garch.estimateVolatility(logReturns);
 * </pre>
 * </p>
 * 
 * @author akashsolienkar
 */
public class GarchModel {

    private final double omega;  // Long-term variance constant
    private final double alpha;  // ARCH parameter (shock sensitivity)
    private final double beta;   // GARCH parameter (volatility persistence)
    private static GarchModel instance = null;

    private GarchModel(double omega, double alpha, double beta) {
        if (alpha + beta >= 1.0) {
            throw new IllegalArgumentException("GARCH model must satisfy: alpha + beta < 1 for stationarity.");
        }
        this.omega = omega;
        this.alpha = alpha;
        this.beta = beta;
    }

    /**
     * Returns a singleton instance of the GarchModel with default parameters.
     * 
     * @return singleton GarchModel instance
     */
    public static GarchModel getInstance() {
        if (instance == null) {
            instance = new GarchModel(0.00001, 0.1, 0.85);
        }
        return instance;
    }

    /**
     * Creates a new instance of GarchModel with specified parameters.
     * 
     * @param omega long-term variance constant
     * @param alpha ARCH parameter
     * @param beta GARCH parameter
     * @return new GarchModel instance
     */
    public static GarchModel getNewInstance(double omega, double alpha, double beta) {
        instance = new GarchModel(omega, alpha, beta);
        return instance;
    }

    /**
     * Estimates a time series of volatility (σₜ) given historical log returns.
     * <p>
     * Volatility σₜ is computed recursively as:
     * σₜ² = ω + α * εₜ₋₁² + β * σₜ₋₁²
     * </p>
     * 
     * @param logReturns historical return residuals (daily log returns)
     * @return list of estimated σₜ (standard deviations) for each time t
     */
    public List<Double> estimateVolatility(List<Double> logReturns) {
        List<Double> sigmaSeries = new ArrayList<>();
        if (logReturns == null || logReturns.size() < 2) return sigmaSeries;

        double initialVariance = calculateSampleVariance(logReturns);
        double prevVariance = initialVariance;

        for (int t = 1; t < logReturns.size(); t++) {
            double epsilonSquared = Math.pow(logReturns.get(t - 1), 2);
            double variance = omega + alpha * epsilonSquared + beta * prevVariance;
            double sigma = Math.sqrt(variance);

            sigmaSeries.add(sigma);
            prevVariance = variance;
        }

        return sigmaSeries;
    }

    private double calculateSampleVariance(List<Double> values) {
        double mean = values.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double sumSq = 0.0;
        for (double v : values) {
            sumSq += Math.pow(v - mean, 2);
        }
        return sumSq / values.size();
    }

    /**
     * Convenience method to convert prices into log returns and run the GARCH volatility estimation.
     * 
     * @param prices historical price data
     * @return list of estimated volatility σₜ corresponding to the input price series
     */
    public List<Double> runGarch(List<Double> prices) {
        List<Double> logReturns = new ArrayList<>();
        for (int i = 1; i < prices.size(); i++) {
            if (prices.get(i - 1) > 0 && prices.get(i) > 0) {
                double r = Math.log(prices.get(i) / prices.get(i - 1));
                logReturns.add(r);
            }
        }

        return estimateVolatility(logReturns);
    }
}
