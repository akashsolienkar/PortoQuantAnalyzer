package com.example.PortoQuant.HistoricalData;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import org.json.JSONObject;

import com.example.PortoQuant.DataSources.HttpApiClient;

public class StockDataSerivce {

    public List<Double> fetchDailyPrices(String symbol, String apiKey) throws Exception {
//        String urlStr = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED"
//                + "&symbol=" + symbol
//                + "&outputsize=compact"
//                + "&apikey=" + apiKey;
    	String urlStr =  "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&outputsize=full&apikey=demo";
    	String result = new HttpApiClient.Builder()
                .url(urlStr)
                .connectTimeout(3000)
                .readTimeout(3000)
                .method("GET")
                .build()
                .execute();

//        URL url = new URL(urlStr);
//        HttpURLConnection con = (HttpURLConnection) url.openConnection();
//        con.setRequestMethod("GET");
//
//        BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
//        StringBuilder json = new StringBuilder();
//        String line;
//        while ((line = reader.readLine()) != null) {
//            json.append(line);
//        }
//        reader.close();

        System.out.println(json.toString());
        JSONObject jsonObj = new JSONObject(json.toString());
        JSONObject timeSeries = jsonObj.getJSONObject("Time Series (Daily)");
        List<String> dates = new ArrayList<>(timeSeries.keySet());
        dates.sort(Comparator.reverseOrder());

        // Extract last 257 adjusted close prices
        List<Double> closingPrices = new ArrayList<>();
        for (int i = 0; i < Math.min(257, dates.size()); i++) {
            String date = dates.get(i);
            double close = timeSeries.getJSONObject(date).getDouble("4. close");
            closingPrices.add(close);
        }

        // Reverse for oldest to newest order
        Collections.reverse(closingPrices);
        return closingPrices;
    }

    public static void main(String[] args) throws Exception {
        StockDataSerivce fetcher = new StockDataSerivce();
        String apiKey = "6SADVR6PUKSWW9OP"; // ðŸ”‘ Paste your key here
        String symbol = "IBM"; // For Indian stocks

        List<Double> prices = fetcher.fetchDailyPrices(symbol, apiKey);
        prices.stream().limit(10).forEach(System.out::println); // Print first 10
    }
}
